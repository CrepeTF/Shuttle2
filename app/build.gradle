plugins {
    id("com.android.application")
    id("com.github.triplet.play") version "2.2.0"
    id("kotlin-android")
    id("kotlin-android-extensions")
    id("androidx.navigation.safeargs.kotlin")
    id("kotlin-kapt")
    id("io.fabric")
}

ext {
    versionMajor = 0
    versionMinor = 0
    versionPatch = 12
}

android {
    compileSdkVersion 28

    defaultConfig {
        applicationId "com.simplecityapps.shuttle"
        minSdkVersion 21
        targetSdkVersion 28
        versionName computeVersionName()
        versionCode computeVersionCode()
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }

    signingConfigs {
        release {
            storeFile file('../keystore.ks')
            keyAlias project.hasProperty('keyAlias') ? project.keyAlias : 'default'
            storePassword project.hasProperty('storePass') ? project.storePass : 'default'
            keyPassword project.hasProperty('keyPass') ? project.keyPass : 'default'
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".dev"
            ext.enableCrashlytics = false
        }
        release {
            minifyEnabled false

            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            signingConfig signingConfigs.release
        }
    }

    flavorDimensions "all"

    packagingOptions {
        exclude 'META-INF/core_debug.kotlin_module'
        exclude 'META-INF/core_release.kotlin_module'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // Shuttle Core
    implementation project(path: ':core')

    // Shuttle MediaProvider Core
    implementation project(path: ':mediaprovider:core')

    // Shuttle Image Loader
    implementation project(path: ':imageloader')

    // Shuttle Playback
    implementation project(path: ':playback')

    // TagLib
    implementation project(path: ':taglib:lib')

    // RecylerView Adapter
    implementation project(path: ':recyclerview-adapter')

    // Kotlin Standard Library
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    // Kotlin Extensions
    implementation 'androidx.core:core-ktx:1.0.2'
    implementation "androidx.fragment:fragment-ktx:1.1.0-alpha09"

    // RecyclerView FastScroll
    implementation 'com.github.timusus:RecyclerView-FastScroll:dev-SNAPSHOT'

    // Material Design
    implementation 'com.google.android.material:material:1.0.0'

    // AppCompat
    implementation 'androidx.appcompat:appcompat:1.0.2'

    // Constraint Layout
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

    // Android Arch
    implementation 'androidx.lifecycle:lifecycle-extensions:2.0.0'

    // AndroidX Navigation
    implementation "androidx.navigation:navigation-fragment-ktx:2.1.0-alpha04"
    implementation "androidx.navigation:navigation-ui-ktx:2.1.0-alpha04"

    // RxJava
    implementation "io.reactivex.rxjava2:rxjava:2.2.7"
    implementation "io.reactivex.rxjava2:rxandroid:2.1.1"

    // RxKotlin
    implementation 'io.reactivex.rxjava2:rxkotlin:2.3.0'

    // Dagger core
    implementation 'com.google.dagger:dagger-android:2.22.1'
    kapt 'com.google.dagger:dagger-compiler:2.22.1'

    // Dagger Android
    implementation 'com.google.dagger:dagger-android-support:2.21'
    kapt "com.google.dagger:dagger-android-processor:2.21"

    // AssistedInject
    compileOnly 'com.squareup.inject:assisted-inject-annotations-dagger2:0.3.3'
    kapt 'com.squareup.inject:assisted-inject-processor-dagger2:0.3.3'

    // Timber
    implementation 'com.jakewharton.timber:timber:4.7.1'

    // OKHttp
    implementation 'com.squareup.okhttp3:okhttp:3.13.1'

    // Firebase
    implementation 'com.google.firebase:firebase-core:16.0.9'

    // Crashlytics
    implementation 'com.crashlytics.sdk.android:crashlytics:2.10.1'

    // Leak Canary
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.0-alpha-1'
}

play {
    if (System.getenv('JENKINS_URL') != null) {
        serviceAccountCredentials = file(System.getenv('DEPLOYMENT_KEYS'))
        defaultToAppBundles = true
        track = "internal"
    } else {
        serviceAccountCredentials = file('../deployment_keys.json')
    }
}

afterEvaluate {
    processReleaseGoogleServices.dependsOn copyGoogleServies
}

task copyGoogleServies(type: Copy) {
    if (System.getenv('JENKINS_URL') != null) {
        description = 'Copies google-services.json from Jenkins secret file'
        from System.getenv('GOOGLE_SERVICES')
        include "google-services.json"
        into "."
    }
}

apply plugin: 'com.google.gms.google-services'


def computeVersionName() {
    // Basic <major>.<minor> version name
    if (System.getenv('JENKINS_URL') != null) {
        return String.format('%d.%d.%d-%s', versionMajor, versionMinor, versionPatch, System.getenv('GIT_TAG_NAME'))
    }
    return String.format('%d.%d.%d', versionMajor, versionMinor, versionPatch)
}

def computeVersionCode() {
    // Major + minor + Jenkins build number (where available)
    return (versionMajor * 10000000) + (versionMinor * 1000000) + (versionPatch * 10000) + Integer.valueOf(System.env.BUILD_NUMBER ?: 0)
}